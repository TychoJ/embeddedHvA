~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Opdracht 1.c cpplogfile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logfile (C++ versie)

Een logfile wordt vaak gebruikt om tijdens het draaien van een server 
programma op de hoogte te blijven van de status van de uitvoering. Het is een 
tekstbestand dat steeds groter wordt. Mede door deze eenvoud is het een van de
snelste manieren om snel tekstuele (soms binaire) data op te slaan. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hardware 
*	Laptop
*	Raspberry Pi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Software 
*	Via ssh-sessie: g++
*	Via ssh-sessie: nano, vi, … 
*	Via drive-mapping: Notepad++, Visual Code, ...
*	Aantal TODO’s: 3

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Folders en bestanden:
01.c/cpplogfile.cpp                                                aangeleverd
01.c/logfile.hpp                                                   aangeleverd
01.c/logfile.cpp                                                   aangeleverd
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



cpplogfile.cpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 1.c cpplogfile
//
// g++ -Wall -o cpplogfile cpplogfile.cpp logfile.cpp
// ./cpplogfile

#include <stdio.h>
#include "logfile.hpp"

int main(int nArgc, char* aArgv[]) {

  //TODO #3: voeg een tweede logbestand toe voor andere gegevens
  Logfile oLog1;
  char sBuf[100];

  // Initialiseren
  printf("01.c cpplogfile\n\n");
  if (!oLog1.open("log1.txt")) {
    printf("Fout: de logfile kon niet geopend worden!");
    printf("\nAfgebroken :(\n\n");
  };

  // Maak 1000 keer
  for (int i = 0; i < 1000; i++) {
    //TODO #2: wijzig de tekst i kwadraad te tonen
    sprintf(sBuf, "%d ", i);

    printf(sBuf);
    oLog1.write(sBuf);
  };

  // Afsluiten
  oLog1.close();
  printf("\nAfgesloten :-)\n\n");
  return 0;
};



logfile.hpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 1.c cpplogfile

#ifndef _LOGFILE_HPP_
#define _LOGFILE_HPP_

  #include <stdbool.h>
  #include <stdio.h>

  class Logfile {
    public:
      //TODO #1: voeg de logfile 'interface' toe

    private:
      FILE* pFile_;
  };

#endif // _LOGFILE_HPP_



logfile.cpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 1.c cpplogfile

#include "logfile.hpp"

bool Logfile::open(const char* sFilename) {

  // Open de logfile om aan toe te voegen.
  pFile_ = fopen(sFilename, "a");

  return pFile_ != NULL;
};

bool Logfile::close() {

  // Sluit het bestand (0 = succes)
  return fclose(pFile_) == 0;
};

void Logfile::write(char* pBuf) {

  char sNewline[] = "\n";

  // Schrijf alle letters.
  while (*pBuf > 0) {
    fputc(*pBuf, pFile_);
    pBuf++;
  };

  // Sluit af met \n
  pBuf = sNewline;
  while (*pBuf > 0) {
    fputc(*pBuf, pFile_);
    pBuf++;
  };
};
