~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Opdracht 6.a mutex
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In opdracht 5.a werd duidelijk dat de uitvoer naar het scherm dwars door 
elkaar kan gaan. Het seinpaal mechaniek zorgt ervoor dat je eenvoudig kan 
afdwingen dat stukken software niet onderbroken kunnen worden. De mutex is 
een binaire seinpaal met een paar extra toegevoegde handige eigenschappen. 

Maak het programma werkend en varieer met de delay() in de main() functie. 
Deze delay() houdt de schermuitvoer langer/korter vast waardoor de snelle 
thread zichtbaar moet wachten totdat hij de mutex kan claimen.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hardware 
* Laptop
* Raspberry Pi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Software 
*	Via ssh-sessie: gcc
*	Via ssh-sessie: g++
*	Via ssh-sessie: nano, vi, … 
*	Via drive-mapping: Notepad++, Visual Code, …
*	Aantal TODO’s: 5

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Folders en bestanden:
06.a/mutex.cpp                                                     aangeleverd
06.a/mutex.hpp                                                     aangeleverd
06.a/threadletters.cpp                                             aangeleverd
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



mutex.cpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 6.a mutex
//
// g++ -Wall -pthread -o mutex mutex.cpp threadletters.cpp
// ./mutex

//TODO: voeg de juiste include toe

// Het programma begint
bool _bRunning = true;
//TODO: zorg dat de mutex variable een instantie krijgt om te kunnen gebruiken

int main(int nArgc, char* aArgv[]) {

  int nRet, i;
  pthread_t oThreadLetters;
  pthread_attr_t oAttr;
  void *pStatus;

  // Initialiseren
  printf("6.a mutex\n\n");

  // Mutex aanmaken voordat de thread gemaakt en gestart wordt
  nRet = pthread_mutex_init(&oLockOutput, NULL);
  if (nRet > 0) {
    printf("Mutex kon niet gemaakt worden!\n");
    return -1;
  };

  // Thread eigenschappen instellen
  pthread_attr_init(&oAttr);
  pthread_attr_setdetachstate(&oAttr, PTHREAD_CREATE_JOINABLE);

  nRet = pthread_create(&oThreadLetters, &oAttr, ThreadLetters, (void*)123); 
  if (nRet > 0) {
    printf("Thread kon niet gemaakt worden!\n");
    return -1;
  };

  // Een tijdelijk loop om het effect van de mutex te laten zien
  for (i = 0; i < 25; i++) {
    
    pthread_mutex_lock(&oLockOutput);
    printf(" main "); fflush(stdout);
    //TODO: voeg een delay van 750 msec toe
    thread_delay();
    pthread_mutex_unlock(&oLockOutput);

    thread_delay(750);
  };
  _bRunning = false;

  // Afsluiten door te wachten op de hoofdthread en daarna elke andere thread
  pthread_attr_destroy(&oAttr);
  printf("\nAfsluiten threads: "); fflush(stdout);
  pthread_join(oThreadLetters, &pStatus); printf(" ThreadLetters=%ld ", (long)pStatus);
  
  pthread_mutex_destroy(&oLockOutput);

  printf("\nAfgesloten :-)\n\n");
  return 0;
};



mutex.hpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 6.a mutex

#ifndef _MUTEX_HPP_
#define _MUTEX_HPP_

  #include <stdbool.h>
  #include <stdio.h>
  #include <time.h>
  #include <pthread.h>

  // Maak #define voor handige delay-functie in msec
  #define thread_delay(nMSec) \
  { \
    struct timespec oTime, oTimeLeft; \
    oTime.tv_sec = 0; \
    oTime.tv_nsec = (nMSec) * 1000000L; \
    nanosleep(&oTime, &oTimeLeft); \
  };

  // Mijn threads
  extern bool _bRunning;
  extern pthread_mutex_t oLockOutput;
  //TODO: zorg dat de thread ook in de main() gebruikt kan worden

#endif // _MUTEX_HPP_



threadletters.cpp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 6.a mutex

//TODO: zorg voor de juiste include

void *ThreadLetters(void* pThreadData) {

  long nTid = (long)pThreadData;

  printf("ThreadLetters(%ld)\n", nTid);

  // Ga door tot het programma niet meer draait
  while (true) {

    for (char c = 'A'; c <= 'Z'; c++) {

      pthread_mutex_lock(&oLockOutput);
      printf("%c", c); fflush(stdout);
      pthread_mutex_unlock(&oLockOutput);
      thread_delay(100);

      // Stoppen?
      if (!_bRunning) {
        pthread_exit(NULL);
      };
    };
  };

  // Thread vrijgeven
  pthread_exit(NULL);
};